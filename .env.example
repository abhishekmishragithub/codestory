# .env.example

# Default model to use for commit message generation
# Options:
#   - Outlines compatible models, e.g., "mistralai/Mistral-7B-Instruct-v0.2"
#   - OpenAI models, prefix with "openai/", e.g., "openai/gpt-3.5-turbo"
#   - Gemini models, prefix with "gemini/", e.g., "gemini/gemini-pro"
#   - Claude models, prefix with "claude/", e.g., "claude/claude-2.1"
DEFAULT_MODEL=mistralai/Mistral-7B-Instruct-v0.2

# Whether to use emojis in commit messages by default
# Options: true, false
USE_EMOJI=false

# API Keys for different services
OPENAI_API_KEY=your_openai_api_key_here
GEMINI_API_KEY=your_gemini_api_key_here
CLAUDE_API_KEY=your_claude_api_key_here

# Maximum length for commit message description
# This is used in the ConventionalCommit Pydantic model
MAX_DESCRIPTION_LENGTH=100

# Maximum length for commit message scope
# This is used in the ConventionalCommit Pydantic model
MAX_SCOPE_LENGTH=50

# Optional: Custom model API endpoint
# Use this if you're using a custom hosted model
# CUSTOM_MODEL_URL=http://your-custom-model-api-endpoint.com

# Optional: API key for the model service (if required)
# MODEL_API_KEY=your_api_key_here

# Optional: Caching option for similar diffs
# Set to true to enable caching of model outputs for similar diffs
# ENABLE_CACHING=false

# Optional: Cache expiration time in seconds
# CACHE_EXPIRATION=3600

# Optional: Logging level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# LOG_LEVEL=INFO

# Optional: Custom commit types
# Add your own commit types here, separated by commas
# CUSTOM_COMMIT_TYPES=db,ui,api

# Optional: Default commit format
# Options: conventional, custom (if you implement a custom format)
# COMMIT_FORMAT=conventional